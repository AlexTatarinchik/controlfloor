<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>ControlFloor</title>

<link rel="stylesheet" href="https://cdn.materialdesignicons.com/4.9.95/css/materialdesignicons.min.css" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto&display=swap" />
<link rel="stylesheet" href="/assets/css/styles.css" />
<link rel="stylesheet" href="/assets/css/sidebar.css" />
		
<meta charset="utf-8">
<style>
  canvas {
    border: solid 1px black;
  }
</style>
<script>
  function getel( id ) {
    return document.getElementById( id );
  }
  function getCursorPosition(canvas, event) {
    const rect = canvas.getBoundingClientRect()
    const x = event.clientX - rect.left
    const y = event.clientY - rect.top
    console.log("x: " + x + " y: " + y)
    return [x,y];
  }
  var session='';
  var udid="{{ html .udid }}";
  var clickWid={{ html .clickWidth }};
  var clickHeg={{ html .clickHeight }};
  var vidWid={{ html .vidWidth }};
  var vidHeg={{ html .vidHeight }};
  var base = document.location.protocol + '//' + document.location.host;
  
  function req( type, url, handler, body ) {
    var xhr = new XMLHttpRequest();
    xhr.open( type, url, true );
    xhr.responseType = 'json';
    xhr.onload = function(x) { handler(x,xhr); }
    if( type == 'POST' && body ) {
        if( typeof( body ) == 'object' ) {
            var data = new FormData();
            var test = {};
            for( var k in body ) if( body.hasOwnProperty( k ) ) { data.append( k, body[k] ); test[k] = body[k]; }
            console.log( test );
            xhr.send( data );
        }
        else xhr.send(body);
    }
    else xhr.send();
  }
  function clickAt( pos ) {
    var x = Math.floor( (pos[0]/(vidWid/2))*clickWid ); 
    var y = Math.floor( (pos[1]/(vidHeg/2))*clickHeg );
    req( 'POST', base + '/devClick', function() {}, { udid, x, y } );    
  }
  function doHardPress( pos ) {
    var x = Math.floor( (pos[0]/(vidWid/2))*clickWid ); 
    var y = Math.floor( (pos[1]/(vidHeg/2))*clickHeg );
    req( 'POST', base + '/devHardPress', function() {}, { udid, x, y } );    
  }
  function doLongPress( pos ) {
    var x = Math.floor( (pos[0]/(vidWid/2))*clickWid ); 
    var y = Math.floor( (pos[1]/(vidHeg/2))*clickHeg );
    req( 'POST', base + '/devLongPress', function() {}, { udid, x, y } );    
  }
  function swipe( pos1, pos2 ) {
    var x1 = Math.floor( (pos1[0]/(vidWid/2))*clickWid ); 
    var y1 = Math.floor( (pos1[1]/(vidHeg/2))*clickHeg );
    var x2 = Math.floor( (pos2[0]/(vidWid/2))*clickWid ); 
    var y2 = Math.floor( (pos2[1]/(vidHeg/2))*clickHeg );
    req( 'POST', base + '/devSwipe', function() {}, { udid, x1, y1, x2, y2 } );    
  }
  var keyqueue = [];
  var firstkeyPress = 0;
  function sendKeys() {
    if( !keyqueue.length ) return;
    var diffMs = Date.now() - firstkeyPress;
    if( diffMs < 500 ) {
      setTimeout( sendKeys, 200 );
      return;
    }
    var keys = keyqueue.join(",");
    keyqueue = [];
    firstkeyPress = 0;
    
    req( 'POST', base + '/keys', function() {}, { udid, keys } );
  }
  var mode = 'normal';
  var capture = {};
  var capture2 = {};
  capture[8] = 8; // backspace
  capture[9] = 9; // tab
  capture[13] = 13; // enter
  capture[46] = 127; // delete; map to ascii delete
  capture2[39] = 1; // ' - quick search in firefox
  capture2[47] = 1; // / - quick search also
  window.addEventListener("load", function(evt) {
    var canvas = getel("canvas");
    var ctx    = canvas.getContext("2d");
    var home   = getel("home");
    var hardPress = getel("hardPress");
    var longPress = getel("longPress");
    var under = getel("under");
    var ws;
    var pos1;
    
    canvas.width = vidWid/2;
    canvas.height = vidHeg/2;
    under.width = vidWid/2;
    
    home.onclick = function( event ) {
      req( 'POST', '/devHome', function() {}, { udid } );  
    }
    hardPress.onclick = function( event ) {
      if( mode != 'hard' ) {
        hardPress.className = 'mdi mdi-anvil mActive';
        longPress.className = 'mdi mdi-alarm-multiple mInactive';
        mode = 'hard';
      } else {
        hardPress.className = 'mdi mdi-anvil mInactive';
        mode = 'normal';
      }
    }
    longPress.onclick = function( event ) {
      if( mode != 'long' ) {
        longPress.className = 'mdi mdi-alarm-multiple mActive';
        hardPress.className = 'mdi mdi-anvil mInactive';
        mode = 'long';
      } else {
        longPress.className = 'mdi mdi-alarm-multiple mInactive';
        mode = 'normal';
      }
    }
    
    canvas.onmousedown = function( event ) {
      var pos = getCursorPosition( canvas, event );
      if     ( mode == 'hard' ) doHardPress( pos );
      else if( mode == 'long' ) doLongPress( pos );
      else                      pos1 = pos;
    }
    
    canvas.onmouseup = function( event ) {
      if( mode != 'normal' ) return;
      var pos2 = getCursorPosition( canvas, event );
      var dx = Math.abs( pos2[0] - pos1[0] );
      var dy = Math.abs( pos2[1] - pos1[1] );
      if( dx > 3 || dy > 3 ) {
        swipe( pos1, pos2 );
      }
      else clickAt( pos1 );
    }
    
    window.onkeydown = function( event ) {
      var keycode = event.which;
      if( capture[ keycode ] ) {
        keycode = capture[ keycode ];
        event.preventDefault();
        if( !firstkeyPress ) firstkeyPress = Date.now();
        keyqueue.push( keycode );
        setTimeout( sendKeys, 500 );
      }
      else console.log( "key " + keycode );
    }
    
    window.onkeypress = function( event ) {
      var keycode = event.which;
      if( !firstkeyPress ) firstkeyPress = Date.now();
      keyqueue.push( keycode );
      setTimeout( sendKeys, 500 );
      if( capture2[ keycode ] ) {
        event.preventDefault();
      } else console.log( "key2 " + keycode );
    }
    
    var wsprot = ( document.location.protocol == 'https:' ) ? "wss" : "ws"; 
    var url = wsprot+":\/\/"+document.location.host+"\/imgStream?udid={{ html .udid }}";
    ws = new WebSocket( url );
    ws.onopen = function( event ) {
        console.log("Websocket open");
    }
    ws.onclose = function( event ) {
        console.log("Websocket closed");
        ws = null;
    }
    ws.onmessage = function( event ) {
        if( event.data instanceof Blob ) {
          var image = new Image();
          var url;
          image.onload = function() {
            ctx.drawImage(image, 0, 0, vidWid/2, vidHeg/2 );
            URL.revokeObjectURL( url );
          };
          image.onerror = function( e ) {
            console.log('Error during loading image:', e);
          }
          var blob = event.data;
          
          url = URL.createObjectURL( blob );
          image.src = url;
        }
        else {
            console.log( event.data );
        }
    }
    ws.onerror = function( event ) {
        console.log( "Error: ", event.data );
    }
  });
</script>
</head>

<body>
    {{template "sidebar" dict "udid" .udid }}
    <div class="main">
        <canvas id="canvas" width="375" height="667"></canvas><br>
        <div style="width:375px; font-size: 32px" id="under">
            <center>
                <i id='home' class="mdi mdi-home"></i>
                <i id='hardPress' class="mdi mdi-anvil mInactive"></i>
                <i id='longPress' class="mdi mdi-alarm-multiple mInactive"></i>
            </i>
        </div>
    </div>
</body>
</html>
